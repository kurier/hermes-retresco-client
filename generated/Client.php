<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace telekurier\RetrescoClient;

class Client extends \Jane\OpenApiRuntime\Client\Psr7HttplugClient
{
    /**
     * Deletes a document.
     *
     * @param int    $documentId
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \telekurier\RetrescoClient\Exception\DeleteDocumentByDocumentIdInternalServerErrorException
     *
     * @return null|\telekurier\RetrescoClient\Model\RetrescoClientError|\Psr\Http\Message\ResponseInterface
     */
    public function deleteDocumentByDocumentId(int $documentId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \telekurier\RetrescoClient\Endpoint\DeleteDocumentByDocumentId($documentId), $fetch);
    }

    /**
     * Gets a document.
     *
     * @param int    $documentId
     * @param string $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \telekurier\RetrescoClient\Exception\GetDocumentByDocumentIdBadRequestException
     * @throws \telekurier\RetrescoClient\Exception\GetDocumentByDocumentIdNotFoundException
     * @throws \telekurier\RetrescoClient\Exception\GetDocumentByDocumentIdInternalServerErrorException
     *
     * @return null|\telekurier\RetrescoClient\Model\RetrescoDocument|\telekurier\RetrescoClient\Model\RetrescoClientError|\Psr\Http\Message\ResponseInterface
     */
    public function getDocumentByDocumentId(int $documentId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \telekurier\RetrescoClient\Endpoint\GetDocumentByDocumentId($documentId), $fetch);
    }

    /**
     * Saves a document.
     *
     * @param int   $documentId
     * @param array $queryParameters {
     *
     *     @var int $enrich Use semantic enrichment (default: true)
     *     @var int $in_text_links Add in-text links, only when enrich=true (default: false)
     *     @var int $index Index documents (default: true)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdBadRequestException
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdConflictException
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdInternalServerErrorException
     *
     * @return null|\telekurier\RetrescoClient\Model\RetrescoDocument|\telekurier\RetrescoClient\Model\RetrescoClientError|\Psr\Http\Message\ResponseInterface
     */
    public function putDocumentByDocumentId(int $documentId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \telekurier\RetrescoClient\Endpoint\PutDocumentByDocumentId($documentId, $queryParameters), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\HttpClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\UriFactoryDiscovery::find()->createUri('https://kurier-stage01.rtrsupport.de/api');
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $messageFactory = \Http\Discovery\MessageFactoryDiscovery::find();
        $streamFactory = \Http\Discovery\StreamFactoryDiscovery::find();
        $serializer = new \Symfony\Component\Serializer\Serializer(\telekurier\RetrescoClient\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $messageFactory, $serializer, $streamFactory);
    }
}
