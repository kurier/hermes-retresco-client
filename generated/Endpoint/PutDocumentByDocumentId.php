<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace telekurier\RetrescoClient\Endpoint;

class PutDocumentByDocumentId extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    protected $documentId;

    /**
     * Saves a document.
     *
     * @param int   $documentId
     * @param array $queryParameters {
     *
     *     @var int $enrich Use semantic enrichment (default: true)
     *     @var int $in_text_links Add in-text links, only when enrich=true (default: false)
     *     @var int $index Index documents (default: true)
     * }
     */
    public function __construct(int $documentId, array $queryParameters = [])
    {
        $this->documentId = $documentId;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'PUT';
    }

    public function getUri(): string
    {
        return str_replace(['{documentId}'], [$this->documentId], '/documents/{documentId}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['enrich', 'in_text_links', 'index']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('enrich', ['int']);
        $optionsResolver->setAllowedTypes('in_text_links', ['int']);
        $optionsResolver->setAllowedTypes('index', ['int']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdBadRequestException
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdConflictException
     * @throws \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdInternalServerErrorException
     *
     * @return null|\telekurier\RetrescoClient\Model\RetrescoDocument|\telekurier\RetrescoClient\Model\RetrescoClientError
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoDocument', 'json');
        }
        if (201 === $status) {
            return $serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoDocument', 'json');
        }
        if (400 === $status) {
            throw new \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdBadRequestException($serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoClientError', 'json'));
        }
        if (409 === $status) {
            throw new \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdConflictException($serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoClientError', 'json'));
        }
        if (500 === $status) {
            throw new \telekurier\RetrescoClient\Exception\PutDocumentByDocumentIdInternalServerErrorException($serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoClientError', 'json'));
        }

        return $serializer->deserialize($body, 'telekurier\\RetrescoClient\\Model\\RetrescoClientError', 'json');
    }
}
