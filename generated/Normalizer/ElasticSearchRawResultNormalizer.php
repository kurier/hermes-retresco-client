<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace telekurier\RetrescoClient\Normalizer;

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ElasticSearchRawResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'telekurier\\RetrescoClient\\Model\\ElasticSearchRawResult';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \telekurier\RetrescoClient\Model\ElasticSearchRawResult;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \telekurier\RetrescoClient\Model\ElasticSearchRawResult();
        if (property_exists($data, 'took')) {
            $object->setTook($data->{'took'});
        }
        if (property_exists($data, 'timed_out')) {
            $object->setTimedOut($data->{'timed_out'});
        }
        if (property_exists($data, 'aggregations')) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'aggregations'} as $key => $value) {
                $values[$key] = $this->denormalizer->denormalize($value, 'telekurier\\RetrescoClient\\Model\\ElasticSearchAggregation', 'json', $context);
            }
            $object->setAggregations($values);
        }
        if (property_exists($data, 'hits')) {
            $object->setHits($this->denormalizer->denormalize($data->{'hits'}, 'telekurier\\RetrescoClient\\Model\\ElasticSearchResult', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getTook()) {
            $data->{'took'} = $object->getTook();
        }
        if (null !== $object->getTimedOut()) {
            $data->{'timed_out'} = $object->getTimedOut();
        }
        if (null !== $object->getAggregations()) {
            $values = new \stdClass();
            foreach ($object->getAggregations() as $key => $value) {
                $values->{$key} = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'aggregations'} = $values;
        }
        if (null !== $object->getHits()) {
            $data->{'hits'} = $this->normalizer->normalize($object->getHits(), 'json', $context);
        }

        return $data;
    }
}
